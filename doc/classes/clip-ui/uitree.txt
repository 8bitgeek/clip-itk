$CLASSNAME$
	UITree
$SUMMARY$
	Class UITree
$LANG_RU$
	Класс UITree
$ABOUT$
	Class of hierarchical multi-column lists (tree view).
$LANG_RU$
	Класс иерархического многоколоночного списка (дерева).
$SYNTAX$
	UITree(<acNameColumns>,[<nTreeColumn>])	--> UITree object
$LANG_RU$
	UITree(<acNameColumns>,[<nTreeColumn>])	--> Объект UITree
$ATTRIBUTES$
	<className>	- Class name. Value should be "UITree".
	<columns>	- Array of <link linkend="classuitablecolumn">UITableColumn</link> objects. Table columns.
	<onSelect> 	- Code block. Action that will be call on row selection by double click or 'Enter' key pressed.
$LANG_RU$
	<className>	- Имя класса. Значение: "UITree".
	<columns>	- Массив объектов <link linkend="classuitablecolumn">UITableColumn</link>. Столбцы таблицы.
	<onSelect>	- Блок кода. Действие, вызываемое при выборе строки двойным щелчком мыши или нажатием клавиши 'Enter'.

$METHODNAME$
	UITree()
$SUMMARY$
	Constructor. Create tree view.
$LANG_RU$
	Конструктор. Создать дерево.
$SYNTAX$
	UITree(<acNameColumns>,[<nTreeColumn>])	--> UITree object
$ARGUMENTS$
	<acNameColumns>	- Array of <link linkend="classuitablecolumn">UITableColumn</link> objects. Tree columns.
	<nTreeColumn>	- Number. Column for show hierarchy. Column numbering is begun from 1. 
	By default it is first column.
$LANG_RU$
	<acNameColumns>	- Массив объектов <link linkend="classuitablecolumn">UITableColumn</link>. Столбцы дерева.
	<nTreeColumn>	- Число. Номер столбца для размещения линий иерархии. 
	Нумерация столбцов начинается с 1. По умолчанию - первый столбец.
$ENDMETHOD$


$METHODNAME$
	addNode()
$SUMMARY$
	Add node to tree view.
$LANG_RU$
	Добавить элемент в дерево.
$SYNTAX$
	addNode(<data>,[<id>],[<parent>],[<sibling>],[<expanded>])	--> <sNode>
$ARGUMENTS$
	<data>		- Array of any types. Array of values by columns.
	<id>		- String. Node identifier.
	<parent>	- String. Parent node address.
	<sibling>	- String. Node address. Put node before specified node on such level.
	<expanded>	- Boolean. Expand child nodes.
$LANG_RU$
	<columns>	- Массив любых типов. Массив значений по столбцам соответственно.
	<id>		- Строка. Идентификатор элемента.
	<parent>	- Строка. Адрес родительского элемента.
	<sibling>	- Строка. Адрес элемента. Поместить перед элементом того же уровня.
	<expanded>	- Логическое значение. Сразу показывать дочерние элементы.
$RETURNS$
	String. Node address. 
$LANG_RU$
	Строка. Адрес элемента.
$ENDMETHOD$


$METHODNAME$
	setRow()
$SUMMARY$
	Fill row by values.
$LANG_RU$
	Заполнить строку значениями.
$SYNTAX$
	setRow(<row>,<data>,[<id>])
$ARGUMENTS$
	<row>		- String. Node address.
	<data>		- Array or object. Array of values by columns or object contains fields with column names.
	<id>		- String. Node identifier.
$LANG_RU$
	<row>		- Строка. Адрес элемента.
	<data>		- Mассив или объект. Массив значений по столбцам или объект, содержащий поля с именами столбцов.
	<id>		- Строка. Идентификатор элемента.
$EXAMPLES$
	tree:setRow( "0", { 1, "20.10.03", '"John Corp."', 20000.00, .T. } )
	m := map()
	m:num := 2
	m:date := "29.10.03"
	m:company := '"John Corp."'
	m:sum := 5500.00
	m:flag := .F.
	tree:setRow( "1:1", m, "ID_001" )
$ENDMETHOD$


$METHODNAME$
	getRow()
$SUMMARY$
	Get row from tree as object with values.
$LANG_RU$
	Получить строку из таблицы в виде объекта со значениями.
$SYNTAX$
	getRow(<row>)	--> oRow
$ARGUMENTS$
	<row>		- String. Node address.
$LANG_RU$
	<row>		- Строка. Адрес элемента.
$RETURNS$
	Object contains fields with column names. 
$LANG_RU$
	Объект, содержащий поля с именами столбцов.
$EXAMPLES$
	oRow := tree:getRow("0")
	? oRow:company
$ENDMETHOD$


$METHODNAME$
	removeRow()
$SUMMARY$
	Remove row from table.
$LANG_RU$
	Удалить строку из таблицы.
$SYNTAX$
	removeRow(<row>)
$ARGUMENTS$
	<row>		- String. Node address.
$LANG_RU$
	<row>		- Строка. Адрес элемента.
$EXAMPLES$
	tree:removeRow("0")
$ENDMETHOD$


$METHODNAME$
	setAction()
$SUMMARY$
	Set action that will be executed if tree node selected by double click or 'Enter' key pressed.
$LANG_RU$
	Указать действие, вызываемое при выборе элемента одним щелчком мыши или нажатием клавиши 'Enter'.
$SYNTAX$
	setAction(<signal>,<action>)
$ARGUMENTS$
	<signal>	- String. Signal name. Should be 'selected'.
	<action>	- Code block. Action.
$LANG_RU$
	<signal>	- Строка. Название сигнала. Допустимое значение: 'selected'.
	<action>	- Блок кода. Действие.
$ENDMETHOD$


$METHODNAME$
	clear()
$SUMMARY$
	Clear tree: remove all nodes.
$LANG_RU$
	Очистить дерево: удалить все элементы.
$SYNTAX$
	clear()
$ENDMETHOD$


$METHODNAME$
	getSelection()
$SUMMARY$
	Get identifier of selected node.
$LANG_RU$
	Возвращает идентификатор выделенного элемента.
$SYNTAX$
	getSelection()	--> <sNode>
$RETURNS$
	The selected node identifier.
$LANG_RU$
	Идентификатор выделенного элемента.
$ENDMETHOD$


$METHODNAME$
	getValue()
$SUMMARY$
	Get user identifier of selected row.
$LANG_RU$
	Возвращает пользовательский идентификатор выделенной строки.
$SYNTAX$
	getValue()	--> <id>
$RETURNS$
	The user identifier of selected row.
$LANG_RU$
	Пользовательский идентификатор выделенной строки.
$ENDMETHOD$


$METHODNAME$
	setValue()
$SUMMARY$
	Seе focus to row by its id.
$LANG_RU$
	Устанавливает фокус на строку с заданным идентификатором.
$SYNTAX$
	setValue(<id>) 
$ARGUMENTS$
	<id>		- String. Row identifier.
$LANG_RU$
	<id>		- Строка. Идентификатор строки.
$ENDMETHOD$


$METHODNAME$
	savePosition()
$SUMMARY$
	Get current selected row position.
$LANG_RU$
	Сохранение текущей выделенной строки.
$SYNTAX$
	savePosition()	--> <aPos>
$RETURNS$
	Array with selected row position: row address, column address, horizontal and vertical adjustments.
$LANG_RU$
	Массив с координатами текущей выделенной строки: адреса строки и столбца, горизонтальное и вертикальное смещение.
$ENDMETHOD$


$METHODNAME$
	restorePosition()
$SUMMARY$
	Restore saved row position.
$LANG_RU$
	Восстановление cохранённой позиции строки.
$SYNTAX$
	restorePosition(<aPos>)
$ARGUMENTS$
	<aPos>		- Array with selected row position returned by savePosition() function.
$LANG_RU$
	<aPos>		- Массив с координатами текущей выделенной строки, возвращаемый функцией savePosition().
$ENDMETHOD$


$EXAMPLES$
	rc := array(0)
	aadd(rc, UITableColumn('n1',  'N1', TABLE_COLUMN_TEXT))
	aadd(rc, UITableColumn('n2',  'N2', TABLE_COLUMN_TEXT))
	tree := UITree(rc)
	node1  := tree:addNode({"Node1", "node1111"})
	node11 := tree:addNode({"Node2"})
	node2  := tree:addNode({"Leaf1"},, node1)

$PLATFORMS$
	No dependies of platform.
$LANG_RU$
	Не зависит от платформы.
$SEEALSO$
	UITABLECOLUMN UITABLE UIEDITTABLE
$AUTHOR$
	Andrey Cherepanov <skull@eas.lrn.ru>
$LANG_RU$
	Андрей Черепанов <skull@eas.lrn.ru>
$LASTDATE$

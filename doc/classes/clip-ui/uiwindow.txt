$CLASSNAME$
	UIWindow
$SUMMARY$
	Class UIWindow.
$LANG_RU$
	Класс UIWindow.
$ABOUT$
	Class of separate window.
$LANG_RU$
	Класс отдельного окна.
$SYNTAX$
	UIWindow([<caption>],<parent>,[<name>],[<close>],[<resizeable>])	--> UIWindow object
$LANG_RU$
	UIWindow([<caption>],<parent>,[<name>],[<close>],[<resizeable>])	--> Объект UIWindow
$ATTRIBUTES$
	<className>	- Class name. Value should be "UIWindow".
	<name>		- Window name defined in constructor.
	<userSpace>	- Layout for widget placement. <link linkend="classuivbox">UIVBox</link> object.
$LANG_RU$
	<className>	- Имя класса. Значение: "UIWindow".
	<name>		- Имя окна для его поиска, заданное в конструкторе.
	<userSpace>	- Область размещения виджетов. Объект <link linkend="classuivbox">UIVBox</link>.

$METHODNAME$
	UIWindow()
$SUMMARY$
	Constructor. Create separate window.
$LANG_RU$
	Конструктор. Создать отдельное окно.
$SYNTAX$
	UIWindow([<caption>],<parent>,[<name>],[<close>],[<resizeable>])
$ARGUMENTS$
	<caption> 	- String. Window title.
	<parent>	- Window object. Parent window.
	<name> 		- String. Window name.
	<close>		- Boolean. Quit application if window is closed.
	<resizeable>	- Boolean. Ability of change window size manually.
$LANG_RU$
	<caption> 	- Строка. Заголовок окна.
	<parent>	- Объект окна. Родительское окно.
	<name> 		- Строка. Имя окна для его поиска.
	<close>		- Логическое значение. Закончить работу приложения при закрытии окна.
	<resizeable>	- Логическое значение. Возможность изменения размеров окна вручную.

$METHODNAME$
	close()
$SUMMARY$
	Close window.
$LANG_RU$
	Закрыть окно.
$SYNTAX$
	close()
$ENDMETHOD$

$METHODNAME$
	childClose()
$SUMMARY$
	Close current child window.
$LANG_RU$
	Закрыть текущее дочернее окно.
$SYNTAX$
	childClose()
$ENDMETHOD$

$METHODNAME$
	childCloseAll()
$SUMMARY$
	Close all child windows.
$LANG_RU$
	Закрыть все дочерние окна.
$SYNTAX$
	childCloseAll()
$ENDMETHOD$

$METHODNAME$
	setCaption()
$SUMMARY$
	Set new window caption.
$LANG_RU$
	Изменить заголовок окна.
$SYNTAX$
	setCaption(<caption>)
$ARGUMENTS$
	<caption>	- String. Text of window title.
$LANG_RU$
	<caption>	- Строка. Текст заголовка окна.
$ENDMETHOD$

$METHODNAME$
	getGeometry()
$SUMMARY$
	Get size and position of window.
$LANG_RU$
	Вернуть размеры и координаты расположения окна.
$SYNTAX$
	getGeometry()	--> <aRect>
$RETURNS$
	Array of elements: width, height, x, y in pixels respectively.
$LANG_RU$
	Массив с элементами: ширина, высота, x, y.
$ENDMETHOD$

$METHODNAME$
	setGeometry()
$SUMMARY$
	Change size and/or position of window.
$LANG_RU$
	Изменить размеры и/или координаты расположения окна.
$SYNTAX$
	setGeometry(<geom>)
$ARGUMENTS$
	<geom>		- Array of number or number. Size and position as array of elements: width, height, x, y in pixels respectively. If parameter type is number it is mean widget width in pixels.
$LANG_RU$
	<geom>		- Массив чисел или число. Размеры и положение окна в виде массива элементов: ширина, высота, x, y. При указании параметра в виде числа подразумевается ширина в точках.
$ENDMETHOD$

$METHODNAME$
	setPlacement()
$SUMMARY$
	Set window at center of the screen.
$LANG_RU$
	Разместить окно по центру экрана.
$SYNTAX$
	setPlacement(<centered>)
$ARGUMENTS$
	<centered>	- Boolean. Flag of placement window at center of the screen.
$LANG_RU$
	<centered>	- Логическое значение. Флаг размещения окна по центру экрана.
$ENDMETHOD$

$METHODNAME$
	setMDI()
$SUMMARY$
	Create area for child window placement. This method must be call after placement of menu. toolbar(s), statusbar and/or other fixed element(s) into window.
$LANG_RU$
	Установить рабочую область для размещения дочерних окон. Вызывается после размещения на окне меню, панелей инструментов, строки состояния и прочих постоянных элементов.
$SYNTAX$
	setMDI()
$ENDMETHOD$

$METHODNAME$
	setIcon()
$SUMMARY$
	Set icon for the window.
$LANG_RU$
	Присвоить пиктограмму окну.
$SYNTAX$
	setIcon(<pic>)
$ARGUMENTS$
	<pic> - Object UIImage. Icon object.
$LANG_RU$
	<pic> - Объект UIImage. Объект пиктограммы.
$ENDMETHOD$

$METHODNAME$
	setFocus()
$SUMMARY$
	Set focus to specified widget.
$LANG_RU$
	Установить фокус ввода на указанный виджет.
$SYNTAX$
	setFocus(<obj>)
$ARGUMENTS$
	<obj>		- Widget. Focused widget.
$LANG_RU$
	<obj>		- Виджет. Виджет, на который передаётся фокус.
$ENDMETHOD$

$METHODNAME$
	setDefault()
$SUMMARY$
	Set button as default in window.
$LANG_RU$
	Установить кнопку по умолчанию для окна.
$SYNTAX$
	setDefault()
$ARGUMENTS$
	<obj>		- Widget. Default button.
$LANG_RU$
	<obj>		- Виджет. Кнопка, выбранная по умолчанию.
$ENDMETHOD$

$METHODNAME$
	setKeyEvent()
$SUMMARY$
	Set action to shortcut in the window.
$LANG_RU$
	Привязать действие к комбинации клавиш в окне.
$SYNTAX$
	setKeyEvent(<cKey>,<action>)
$ARGUMENTS$
	<cKey>		- String. Shortcut definition. For example, "F5" or "Alt+M".
	<action>	- Code block. Action.
$LANG_RU$
	<cKey>		- Строка. Определение комбинации клавиш. Например, "F5" или "Alt+M".
	<action>	- Блок кода. Действие.
$ENDMETHOD$

$METHODNAME$
	unSetKeyEvent()
$SUMMARY$
	Unset action from shortcut in the window.
$LANG_RU$
	Отвязать действие от комбинации клавиш в окне.
$SYNTAX$
	unSetKeyEvent(<cKey>)
$ARGUMENTS$
	<cKey>		- String. Shortcut definition. For example, "F5" or "Alt+M".
$LANG_RU$
	<cKey>		- Строка. Определение комбинации клавиш. Например, "F5" или "Alt+M".
$ENDMETHOD$

$METHODNAME$
	setObj()
$SUMMARY$
	Fill widgets by object fields.
$LANG_RU$
	Заполнить поля окна значениями атрибутов заданного объекта.
$SYNTAX$
	setObj(<obj>)
$ARGUMENTS$
	<obj> 		- Object. Object contained fields with data.
$LANG_RU$
	<obj> 		- Объект. Объект, содержащий атрибуты с данными.
$ENDMETHOD$

$METHODNAME$
	getObj()
$SUMMARY$
	Get object with filled fields from window widgets contents.
$LANG_RU$
	Возвращает объект, поля которого заполнены данными из полей окна.
$SYNTAX$
	getObj()	--> <object>
$RETURNS$
	Array of widget values.
$LANG_RU$
	Объект, поля которого заполнены данными из полей окна.
$ENDMETHOD$

$METHODNAME$
	setFormat()
$SUMMARY$
	Set format rules for named widget. If format is set for widgets only 
	these widgets is processing in functions setObj(), getObj(), 
	setValues() and getValues().
$LANG_RU$
	Установить правила преобразования значения в содержимое виджета. Если
	форматирование установлено для виджетов, только эти виджеты могут 
	обрабатываться в функциях setObj(), getObj(), setValues() и getValues().
$SYNTAX$
	setFormat(<name>,[<type>],[<length>],[<decLen>],[<format>],[<flags>])
$ARGUMENTS$
	<widget> - String. Widget name.
	<name>   - String. Value name.
	<type>   - String. Value type. Should be 'string', 'number', 'date', 'boolean' or 'array'.
	<length> - Number. Value length.
	<decLen> - Number. Number of digits after decimal-point character.  
	<format> - String. Value format. Not yet implemented.
	<flags>  - String. Value flags. Not yet implemented.
$LANG_RU$
	<widget> - Строка. Имя виджета.
	<name>   - Строка. Имя значения.
	<type>   - Строка. Тип значения. Допустимые варианты: 'string', 'number', 'date', 'boolean' или 'array'.
	<length> - Число. Длина значения.
	<decLen> - Число. Количество знаков дробной части.
	<format> - Строка. Формат значения. Пока не реализовано.
	<flags>  - СТрока. Флаги значения. Пока не реализовано.
$ENDMETHOD$

$METHODNAME$
	dialogBox()
$SUMMARY$
	Show dialog window with message.
$LANG_RU$
	Показать диалоговое окно.
$SYNTAX$
	dialogBox(<caption>,<text>,[<buttons>],[<buttonNames>],[<action>])
$ARGUMENTS$
	<caption>	- String. Caption of dialog.
	<text>		- String. Text of message.
	<buttons> 	- String. In the string defined array of buttons in message window. For example, "'&amp;Save','&amp;Cancel'". If parameter isn't defined, only one button 'OK' will be shown.
	<buttonNames> 	- String. In the string defined array of name for button. For example, "'SAVE','CANCEL'".
	<action>	- Code block. Code block which is executed on any defined button on dialog window. As parameters of this call name of pressed button is used.
$LANG_RU$
	<caption>	- Строка. Строка заголовка диалога.
	<text>		- Строка. Текст в окне диалога.
	<buttons> 	- Строка. Строка массива кнопок. Например, "'&amp;Сохранить','&amp;Отменить'". Если параметр не указан, будет показана одна кнопка 'OK'.
	<buttonNames> 	- Строка. Cтрока массива имён кнопок. Например, "'SAVE','CANCEL'".
	<action>	- Блок кода. Блок кода, который выполняется при нажатии любой объявленной кнопки диалога. В качестве параметра блоку кода передаётся имя нажатой кнопки.
$ENDMETHOD$

$METHODNAME$
	show()
$SUMMARY$
	Show window.
$LANG_RU$
	Показать окно.
$SYNTAX$
	show()
$ENDMETHOD$

$METHODNAME$
	setPanels()
$SUMMARY$
	Attach to window menubar, toolbar and/or statusbar.
$LANG_RU$
	Привязать к окну меню, панель инструментов и строку состояния.
$SYNTAX$
	setPanels([<menu>],[<toolBar>],[<statusBar>])
$ARGUMENTS$
	<menu>		- Object <link linkend="classuimenu">UIMenu</link>. Menubar.
	<toolBar> 	- Object <link linkend="classuitoolbar">UIToolBar</link>. Toolbar.
	<statusBar> 	- Object <link linkend="classuistatusbar">UIStatusBar</link>. Statusbar.
$LANG_RU$
	<menu>		- Объект <link linkend="classuimenu">UIMenu</link>. Меню.
	<toolBar> 	- Объект <link linkend="classuitoolbar">UIToolBar</link>. Панель инструментов.
	<statusBar> 	- Объект <link linkend="classuistatusbar">UIStatusBar</link>. Строка состояния.
$ENDMETHOD$

$METHODNAME$
	setName()
$SUMMARY$
	Set name for widget.
$LANG_RU$
	Присвоить имя полю окна.
$SYNTAX$
	setName(<name>,<o>) --> <o>
$ARGUMENTS$
	<name>		- String. Field name.
	<o>		- Object. Widget object.
$LANG_RU$
	<name>		- Строка. Имя поля.
	<o>		- Объект. Объект виджета.
$RETURNS$
	Named widget object.
$LANG_RU$
	Объект именованного виджета.
$ENDMETHOD$

$METHODNAME$
	val()
$SUMMARY$
	Get widget value by its name.
$LANG_RU$
	Вернуть значение поля по его имени.
$SYNTAX$
	val(<name>)
$ARGUMENTS$
	<name>		- String. Widget name. Setting up name for widget should be done by method setName().
$LANG_RU$
	<name>		- Строка. Имя поля. Привязка имён к полям осуществляется методом setName().
$ENDMETHOD$

$METHODNAME$
	setValues()
$SUMMARY$
	Fill widget values from array.
$LANG_RU$
	Заполнить поля окна значениями из массива.
$SYNTAX$
	setValues(<values>)
$ARGUMENTS$
	<values>	- Array. Array of named values. Each element must be array consisted from two elements: string with widget name and string with its value.
$LANG_RU$
	<values>	- Массив. Массив именованных значений. Каждый элемент массива является массивом, состоящим из двух элементов: строки имени поля и его значения.
$ENDMETHOD$

$METHODNAME$
	getValues()
$SUMMARY$
	Get array of values from window widgets.
$LANG_RU$
	Возвратить массив значений из полей окна.
$SYNTAX$
	getValues()	--> <array>
$RETURNS$
	Array of values from window widgets. Each element is array consisted from two elements: string with widget name and string with its value.
$LANG_RU$
	Массив значений из полей окна. Каждый элемент массива является массивом, состоящим из двух элементов: строки имени поля и его значения.
$ENDMETHOD$

$METHODNAME$
	return()
$SUMMARY$
	Send value to window which initiated creation of this window.
$LANG_RU$
	Возвратить определённое значение в окно, инициировавшее создание данного окна.
$SYNTAX$
	return(<val>)
$ARGUMENTS$
	<val>		- Any type. Value transmitted via return function.
$LANG_RU$
	<val>		- Значение любого типа. Значение, передаваемое через функцию возврата.
$ENDMETHOD$

$METHODNAME$
	select()
$SUMMARY$
	Send value for <link linkend="classuichoice">UIChoice</link> to window which initiated creation of this window.
$LANG_RU$
	Возвратить значение для <link linkend="classuichoice">UIChoice</link> в окно, инициировавшее создание данного окна.
$SYNTAX$
	select(<table>,<column>)
$ARGUMENTS$
	<table>		- String. Name of <link linkend="classuitable">UITable</link> widget in current window.
	<column>	- Number. Column number from <link linkend="classuitable">UITable</link>.
$LANG_RU$
	<table>		- Строка. Имя виджета типа <link linkend="classuitable">UITable</link> в текущем окне.
	<column>	- Число. Номер столбца в <link linkend="classuitable">UITable</link>.
$ENDMETHOD$

$METHODNAME$
	isChanged()
$SUMMARY$
	Return true if any field in window was changed.
$LANG_RU$
	Возвращает логическое значение, было ли изменено хотя одно поле изменяемого в окне объекта.
$SYNTAX$
	isChanged()	--> <bChanged>
$RETURNS$
	Boolean value. If value is true, one or more window fields was/were changed. False is mean that all fields are unchanged.
$LANG_RU$
	Логическое значение. Если значение истина, одно или больше полей окна были изменены. Ложь означает что ни одно поле не было изменено.
$ENDMETHOD$

$METHODNAME$
	setId()
$SUMMARY$
	Set object identifier changed in this window.
$LANG_RU$
	Установить идентификатор объекта, изменяемого в окне.
$SYNTAX$
	setId(<id>)
$ARGUMENTS$
	<id>		- String. Object identifier changed in window.
$LANG_RU$
	<id>		- Строка. Идентификатор объекта, изменяемого в окне.
$ENDMETHOD$

$METHODNAME$
	setSpacing()
$SUMMARY$
	Set space between widgets in window.
$LANG_RU$
	Установить расстояние между виджетами в окне.
$SYNTAX$
	setSpacing(<space>)
$ARGUMENTS$
	<space>		- Number. Space between widgets in pixels.
$LANG_RU$
	<space>		- Число. Расстояние в точках между виджетами в окне.
$ENDMETHOD$

$METHODNAME$
	setPadding()
$SUMMARY$
	Set window border width.
$LANG_RU$
	Установить ширину границы окна.
$SYNTAX$
	setPadding(<space>)
$ARGUMENTS$
	<space>		- Number. Width of window border in pixels.
$LANG_RU$
	<space>		- Число. Ширина границы окна в точках.
$ENDMETHOD$


$EXAMPLES$
	win := UIWindow("Dialog")
	win:setPlacement( .T. )
	win:show()

$PLATFORMS$
	No dependies of platform.
$LANG_RU$
	Не зависит от платформы.
$SEEALSO$
$AUTHOR$
	Andrey Cherepanov <skull@eas.lrn.ru>
$LANG_RU$
	Андрей Черепанов <skull@eas.lrn.ru>
$LASTDATE$

$CLASSNAME$
	UIChildWindow
$SUMMARY$
	Class UIChildWindow.
$LANG_RU$
	Класс UIChildWindow.
$ABOUT$
	Class of child window.
$LANG_RU$
	Класс дочернего окна.
$SYNTAX$
	UIChildWindow([<caption>],<parent>,[<name>])	--> UIChildWindow object
$LANG_RU$
	UIChildWindow([<caption>],<parent>,[<name>])	--> Объект UIChildWindow
$ATTRIBUTES$
	<className>	- Class name. Value should be "UIChildWindow".
	<name>		- Window name defined in constructor.
	<userSpace>	- Layout for widget placement. <link linkend="classuivbox">UIVBox</link> object.
$LANG_RU$
	<className>	- Имя класса. Значение: "UIChildWindow".
	<name>		- Имя окна для его поиска, заданное в конструкторе.
	<userSpace>	- Область размещения виджетов. Объект <link linkend="classuivbox">UIVBox</link>.

$METHODNAME$
	UIChildWindow()
$SUMMARY$
	Constructor. Create child window.
$LANG_RU$
	Конструктор. Создать дочернее окно.
$SYNTAX$
	UIChildWindow([<caption>],<parent>,[<name>])
$ARGUMENTS$
	<caption> 	- String. Caption of child window.
	<parent>	- Window object. Parent window which should be contains child window. Before create first child window for this parent window must be called method setMDI().
	<name> 		- String. Window name.
$LANG_RU$
	<caption> 	- Строка. Заголовок дочернего окна.
	<parent>	- Объект окна. Окно, в котором показывается дочернее окно. Перед созданием первого дочернего окна в родительском окне должен быть выполнен метод setMDI().
	<name> 		- Строка. Имя окна для его поиска.

$METHODNAME$
	add()
$SUMMARY$
	Add widget to child window from top to bottom.
$LANG_RU$
	Добавить виджет сверху на дочернее окно.
$SYNTAX$
	add(<o>,[<expand>],[<fill>],[<padding>])
$ARGUMENTS$
	<o>		- Widget object. Object of added widget.
	<expand> 	- Boolean. Expand widget on window resize.
	<fill>		- Boolean. Strain widget to maximum free space in child window.
	<padding> 	- Number. Set indent between widget margin and margin of cell in child window.
$LANG_RU$
	<o>		- Объект виджета. Объект добавляемого виджета.
	<expand> 	- Логическое значение. Расширять виджет при изменении размера окна.
	<fill>		- Логическое значение. Растянуть виджет по максимально свободному месту в дочернем окне.
	<padding> 	- Число. Установить отступ от виджета до края ячейки дочернего окна.
$ENDMETHOD$

$METHODNAME$
	addEnd()
$SUMMARY$
	Add widget to child window from bottom to top.
$LANG_RU$
	Добавить виджет снизу на дочернее окно.
$SYNTAX$
	addEnd(<o>,[<expand>],[<fill>],[<padding>])
$ARGUMENTS$
	<o>		- Widget object. Object of added widget.
	<expand> 	- Boolean. Expand widget on window resize.
	<fill>		- Boolean. Strain widget to maximum free space in child window.
	<padding> 	- Number. Set indent between widget margin and margin of cell in child window.
$LANG_RU$
	<o>		- Объект виджета. Объект добавляемого виджета.
	<expand> 	- Логическое значение. Расширять виджет при изменении размера окна.
	<fill>		- Логическое значение. Растянуть виджет по максимально свободному месту в дочернем окне.
	<padding> 	- Число. Установить отступ от виджета до края ячейки дочернего окна.
$ENDMETHOD$

$METHODNAME$
	close()
$SUMMARY$
	Close child window.
$LANG_RU$
	Закрыть дочернее окно.
$SYNTAX$
	close()
$ENDMETHOD$

$METHODNAME$
	setObj()
$SUMMARY$
	Fill widgets by object fields.
$LANG_RU$
	Заполнить поля окна значениями атрибутов заданного объекта.
$SYNTAX$
	setObj(<obj>)
$ARGUMENTS$
	<obj> - Object. Object contained fields with data.
$LANG_RU$
	<obj> - Объект. Объект, содержащий атрибуты с данными.
$ENDMETHOD$

$METHODNAME$
	getObj()
$SUMMARY$
	Get object with filled fields from window widgets contents.
$LANG_RU$
	Возвращает объект, поля которого заполнены данными из полей окна.
$SYNTAX$
	getObj()	--> <object>
$RETURNS$
	Array of widget values.
$LANG_RU$
	Объект, поля которого заполнены данными из полей окна.
$ENDMETHOD$

$METHODNAME$
	setFormat()
$SUMMARY$
	Set format rules for named widget. If format is set for widgets only 
	these widgets is processing in functions setObj(), getObj(), 
	setValues() and getValues().
$LANG_RU$
	Установить правила преобразования значения в содержимое виджета. Если
	форматирование установлено для виджетов, только эти виджеты могут 
	обрабатываться в функциях setObj(), getObj(), setValues() и getValues().
$SYNTAX$
	setFormat(<name>,[<type>],[<length>],[<decLen>],[<format>],[<flags>])
$ARGUMENTS$
	<widget> - String. Widget name.
	<name>   - String. Value name.
	<type>   - String. Value type. Should be 'string', 'number', 'date', 'boolean' or 'array'.
	<length> - Number. Value length.
	<decLen> - Number. Number of digits after decimal-point character.  
	<format> - String. Value format. Not yet implemented.
	<flags>  - String. Value flags. Not yet implemented.
$LANG_RU$
	<widget> - Строка. Имя виджета.
	<name>   - Строка. Имя значения.
	<type>   - Строка. Тип значения. Допустимые варианты: 'string', 'number', 'date', 'boolean' или 'array'.
	<length> - Число. Длина значения.
	<decLen> - Число. Количество знаков дробной части.
	<format> - Строка. Формат значения. Пока не реализовано.
	<flags>  - СТрока. Флаги значения. Пока не реализовано.
$ENDMETHOD$

$METHODNAME$
	dialogBox()
$SUMMARY$
	Show dialog window with message.
$LANG_RU$
	Показать диалоговое окно.
$SYNTAX$
	dialogBox(<caption>,<text>,[<buttons>],[<buttonNames>],[<action>])
$ARGUMENTS$
	<caption>	- String. Caption of dialog.
	<text>		- String. Text of message.
	<buttons> 	- String. In the string defined array of buttons in message window. For example, "'&amp;Save','&amp;Cancel'". If parameter isn't defined, only one button 'OK' will be shown.
	<buttonNames> 	- String. In the string defined array of name for button. For example, "'SAVE','CANCEL'".
	<action>	- Code block. Code block which is executed on any defined button on dialog window. As parameters of this call name of pressed button is used.
$LANG_RU$
	<caption>	- Строка. Строка заголовка диалога.
	<text>		- Строка. Текст в окне диалога.
	<buttons> 	- Строка. Строка массива кнопок. Например, "'&amp;Сохранить','&amp;Отменить'". Если параметр не указан, будет показана одна кнопка 'OK'.
	<buttonNames> 	- Строка. Cтрока массива имён кнопок. Например, "'SAVE','CANCEL'".
	<action>	- Блок кода. Блок кода, который выполняется при нажатии любой объявленной кнопки диалога. В качестве параметра блоку кода передаётся имя нажатой кнопки.
$ENDMETHOD$

$METHODNAME$
	show()
$SUMMARY$
	Show window.
$LANG_RU$
	Показать окно.
$SYNTAX$
	show()
$ENDMETHOD$

$METHODNAME$
	setPanels()
$SUMMARY$
	Attach to window menubar, toolbar and/or statusbar.
$LANG_RU$
	Привязать к окну меню, панель инструментов и строку состояния.
$SYNTAX$
	setPanels([<menu>],[<toolBar>],[<statusBar>])
$ARGUMENTS$
	<menu>		- Object <link linkend="classuimenu">UIMenu</link>. Menubar.
	<toolBar> 	- Object <link linkend="classuitoolbar">UIToolBar</link>. Toolbar.
	<statusBar> 	- Object <link linkend="classuistatusbar">UIStatusBar</link>. Statusbar.
$LANG_RU$
	<menu>		- Объект <link linkend="classuimenu">UIMenu</link>. Меню.
	<toolBar> 	- Объект <link linkend="classuitoolbar">UIToolBar</link>. Панель инструментов.
	<statusBar> 	- Объект <link linkend="classuistatusbar">UIStatusBar</link>. Строка состояния.
$ENDMETHOD$

$METHODNAME$
	setName()
$SUMMARY$
	Set name for widget.
$LANG_RU$
	Присвоить имя полю окна.
$SYNTAX$
	setName(<name>,<o>) --> <o>
$ARGUMENTS$
	<name>		- String. Field name.
	<o>		- Object. Widget object.
$LANG_RU$
	<name>		- Строка. Имя поля.
	<o>		- Объект. Объект виджета.
$RETURNS$
	Named widget object.
$LANG_RU$
	Объект именованного виджета.
$ENDMETHOD$

$METHODNAME$
	val()
$SUMMARY$
	Get widget value by its name.
$LANG_RU$
	Вернуть значение поля по его имени.
$SYNTAX$
	val(<name>)
$ARGUMENTS$
	<name>		- String. Widget name. Setting up name for widget should be done by method setName().
$LANG_RU$
	<name>		- Строка. Имя поля. Привязка имён к полям осуществляется методом setName().
$ENDMETHOD$

$METHODNAME$
	setValues()
$SUMMARY$
	Fill widget values from array.
$LANG_RU$
	Заполнить поля окна значениями из массива.
$SYNTAX$
	setValues(<values>)
$ARGUMENTS$
	<values>	- Array. Array of named values. Each element must be array consisted from two elements: string with widget name and string with its value.
$LANG_RU$
	<values>	- Массив. Массив именованных значений. Каждый элемент массива является массивом, состоящим из двух элементов: строки имени поля и его значения.
$ENDMETHOD$

$METHODNAME$
	getValues()
$SUMMARY$
	Get array of values from window widgets.
$LANG_RU$
	Возвратить массив значений из полей окна.
$SYNTAX$
	getValues()	--> <array>
$RETURNS$
	Array of values from window widgets. Each element is array consisted from two elements: string with widget name and string with its value.
$LANG_RU$
	Массив значений из полей окна. Каждый элемент массива является массивом, состоящим из двух элементов: строки имени поля и его значения.
$ENDMETHOD$

$METHODNAME$
	return()
$SUMMARY$
	Send value to window which initiated creation of this window.
$LANG_RU$
	Возвратить определённое значение в окно, инициировавшее создание данного окна.
$SYNTAX$
	return(<val>)
$ARGUMENTS$
	<val>		- Any type. Value transmitted via return function.
$LANG_RU$
	<val>		- Значение любого типа. Значение, передаваемое через функцию возврата.
$ENDMETHOD$

$METHODNAME$
	isChanged()
$SUMMARY$
	Return true if any field in window was changed.
$LANG_RU$
	Возвращает логическое значение, было ли изменено хотя одно поле изменяемого в окне объекта.
$SYNTAX$
	isChanged()	--> <bChanged>
$RETURNS$
	Boolean value. If value is true, one or more window fields was/were changed. False is mean that all fields are unchanged.
$LANG_RU$
	Логическое значение. Если значение истина, одно или больше полей окна были изменены. Ложь означает что ни одно поле не было изменено.
$ENDMETHOD$

$METHODNAME$
	setId()
$SUMMARY$
	Set object identifier changed in this window.
$LANG_RU$
	Установить идентификатор объекта, изменяемого в окне.
$SYNTAX$
	setId(<id>)
$ARGUMENTS$
	<id>		- String. Object identifier changed in window.
$LANG_RU$
	<id>		- Строка. Идентификатор объекта, изменяемого в окне.
$ENDMETHOD$

$METHODNAME$
	setCaption()
$SUMMARY$
	Set new child window caption.
$LANG_RU$
	Изменить заголовок дочернего окна.
$SYNTAX$
	setCaption(<caption>)
$ARGUMENTS$
	<caption>	- String. Text of child window title.
$LANG_RU$
	<caption>	- Строка. Текст заголовка дочернего окна.
$ENDMETHOD$

$METHODNAME$
	setFocus()
$SUMMARY$
	Set focus to specified widget.
$LANG_RU$
	Установить фокус ввода на указанный виджет.
$SYNTAX$
	setFocus(<obj>)
$ARGUMENTS$
	<obj>		- Widget. Focused widget.
$LANG_RU$
	<obj>		- Виджет. Виджет, на который передаётся фокус.
$ENDMETHOD$

$EXAMPLES$
	win := UIMainWindow("Main window")
	win:setMDI()
	childWindow := UIChildWindow("Child window", win, "child")

	childWindow:show()
	win:show()

$PLATFORMS$
	No dependies of platform.
$LANG_RU$
	Не зависит от платформы.
$SEEALSO$
$AUTHOR$
	Andrey Cherepanov <skull@eas.lrn.ru>
$LANG_RU$
	Андрей Черепанов <skull@eas.lrn.ru>
$LASTDATE$

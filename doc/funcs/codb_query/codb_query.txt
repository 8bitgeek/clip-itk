$ABOUTCATEG$
	CODB_QUERY
$SUMMARY$
	Library for work with CODB databases by queries.
$LANG_RU$
	Библиотека для работы с базами данных CODB посредством запросов.
$DESCRIPTION$
	codb_query library provides unified access to CODB databases by
	queries instead call of	methods of classes <link 
	linkend="classCODBDEPOSITORY">CODBDEPOSITORY</link>, 
	<link linkend="classCODBDICTIONARY">CODBDICTIONARY</link>, 
	<link linkend="classCODBLIST">CODBLIST</link> and
	<link linkend="classCODBIDLIST">CODBIDLIST</link>.
	
	Queries are written on CQL language (SQL dialect adapted for CODB). You
	can use this library in own CLIP program or use console program called codb.
	
	Using In Programs.
	
	For use codb_query library in programs you should build program with this
	library. Just append '-lcodb_query' to build command.
	
	Typical session of work with database contains following steps:
<pre>db := codb_connect() // Connect to databases
e := codb_get_error( db ) // Check error
if e != NIL
	?? "ERROR codb_connect(): " + e + chr(10)
	return 1
endif

// Query execution
oRes := codb_execute( db, 'show databases' )

// Process result
aResult := codb_get_result( oRes )

codb_close( db ) // Close databases</pre>
	
	Connect to databases is provided by function <link
	linkend="functioncodb_connect">codb_connect()</link>. This function
	opens all available databases. Function <link
	linkend="functioncodb_close">codb_close()</link> closes all databases.
	
	Real operations with databases are provided by functions:
	<link linkend="functioncodb_execute">codb_execute()</link>, 
	<link linkend="functioncodb_get_metaobject">codb_get_metaobject()</link>,
	<link linkend="functioncodb_get_object">codb_get_object()</link>,
	<link linkend="functioncodb_put_metaobject">codb_put_metaobject()</link>,
	<link linkend="functioncodb_put_object">codb_put_object()</link>.
	
	The difference between these functions is <link
	linkend="functioncodb_execute">codb_execute()</link> returns object, from
	which you can extract data by function <link
	linkend="functioncodb_get_result">codb_get_result()</link>, but other
	functions operate only real objects. 
	
	For error check use <link
	linkend="functioncodb_get_answer">codb_get_answer()</link> and <link
	linkend="functioncodb_get_error">codb_get_error()</link>.
	
	Query result returned from <link
	linkend="functioncodb_execute">codb_execute()</link>, you can processed by
	<link linkend="functioncodb_get_result">codb_get_result()</link>, 
	<link linkend="functioncodb_num_columns">codb_num_columns()</link>,
	<link linkend="functioncodb_num_rows">codb_num_rows()</link> and 
	<link linkend="functioncodb_get_column">codb_get_column()</link>.
	
	Besides you can get result as formatted string. Just pass result object in
	<link linkend="classCODB_FORMATTER">CODB_Formatter()</link> method show.
	
	Using codb.
	
	<pre>codb [options] [database[:depository]]</pre>
	On start codb without any parameters it will be work in interactive mode.
	
	codb options:
	-c 'command'     Execute query and exit.
  	--hide-titles    Suppress column names.
  	--delim='DELIM'  Set columns delimiter.
  	
  	Complete list of options is available on run <pre>codb -h</pre>.
  	
  	Examples:
  	<pre>codb ETC01 -c 'show classes;'</pre>
  	Show all classes in database ETC01.
  	<pre>codb ETC01:ETC0101 -c 'select * from mng_vendor,mng_author;' --delim='|'</pre>
	Show all fields from all objects of classes mng_vendor and mng_author from
	database ETC01 and depository ETC0101 with delimiter '|'.
	
	Note: All data outputs in formatted mode so fields are accompanied
	with spaces to maximum width of element in each column.
  	
  	CQL Commands.
  	
  	Each CODB command should be ended by semicolon. You can write comments
	begin with '#' character and end with line end ('\n'). String are
	delimited by single quote ('). If single quote is part of string it should
	be escaped by backslash (\').
	
	You can pass several commands in -c parameter and through pipe:
  	<pre>echo 'show classes;show indexes;' | codb ETC01</pre>

	Brief CQL Commands Description.
	<pre>
	help - Help about database commands;
	create - Create metaobject;
	delete - Delete object or metaobject;
	describe - Show class structure;
	drop - Delete metaobject by its name;
	get - Get object from depository;
	metaget - Get metaobject;
	metaput - Create or update metaobject;
	put - Create or update object in depository;
	select - Query object attributes;
	show - Show list of metaobjects;
	use - Open database.
	</pre>
	There is command <pre>quit</pre> - quits the program in interactive
	mode. You can quit from codb to press Esc key.

	Verbose CQL Command Description.
	
	<pre>help [<command>]</pre>
	Help on command. If 'help' call without command name show all
	available commands.
	
	<pre>create <metaclass> (<attr1>=<value1>[,...])</pre>
	or <pre>create database <db_name> <path>[<description>]</pre>
	Create database or metaobject.
	Examples:
	create database EAS01 /var/lib/db 'E/AS Database';
	create attribute (name='phone',type='C',len=20);
	
	Supported metaclasses: 
	depository - depository;
	extent - namespace;
	attribute - attribute;
	counter - counter;
	index - index;
	class - class;
	tcolumn - view column;
	tview - view;
	report - report;
	plugin - plugin;
	user - user;
	group - group of users.
		
	<pre>delete <id></pre>
	Delete object or metaobject by its id.
	
	<pre>describe <class_name></pre>
	Show class structure by its name.
	
	<pre>drop <metaclass> <metaobject_name></pre>
	Delete metaobject by its name.
	
	Supported metaclasses: 
	depository - depository;
	extent - namespace;
	attribute - attribute;
	counter - counter;
	index - index;
	class - class;
	tcolumn - view column;
	tview - view;
	report - report;
	plugin - plugin;
	user - user;
	group - group of users.
	
	<pre>get <id></pre>
	Get object content from depository by its id.
	
	<pre>metaget <id></pre>
	Get metaobject content from dictionary by its id.
	
	<pre>metaput (<attr1>=<value1>[, ...])</pre>
	Create or change metaobject in dictionary. If 'id' is defined in attributes
	list, exist object will be replaced by new values.
	
	<pre>put (<attr1>=<value1>[, ...])</pre>
	Create or change metaobject in depository. If 'id' is defined in
	attributes list, exist object will be replaced by new values.
	
	<pre>select <attributes> from <class> [where <condition>]</pre>
	Get list of attribute values matched condition. 
	
	<attributes> - list of attribute names delimited by comma. Names with
	spaces put in single quotes. You can use * for all attribute names for all
	specified classes.
	
	<class> - list of class names delimited by comma. Names with
	spaces put in single quotes.
	
	<condition> - condition by CLIP rules. There are supported
	operators: '==', '!=', '>', '>=', '<=', '<' and logical operators
	'.not.', '.and.', '.or.'. Value should be put in double quotes and
	there are no spaces between operators.
	
	Example:
	<pre>select id,author_name,email from mng_author where code=="Uri";</pre>
	
	<pre>show <metaclass></pre>
	Show metaobject list.
	
	Supported metaclass: 
	databases - databases; 
	depositories - depositories;
	extents - namespaces;
	attributes - attributes;
	counters - counters;
	indexes - indices;
	classes - classes;
	tcolumns - view columns;
	tviews - views;
	reports - reports;
	plugins - plugins;
	users - users;
	groups - user groups;
	statistics - total statistics with number metaobjects in each metaclass.
	
	<pre>use <db> [<depository>]</pre>
	Change current work database and depository.

$LANG_RU$
	Библиотека codb_query предоставляет унифицированный способ работы с базами 
	данным CODB посредством запросов вместо вызовов методов классов 
	<link linkend="classCODBDEPOSITORY">CODBDEPOSITORY</link>, 
	<link linkend="classCODBDICTIONARY">CODBDICTIONARY</link>, 
	<link linkend="classCODBLIST">CODBLIST</link> и
	<link linkend="classCODBIDLIST">CODBIDLIST</link>.
	
	Запросы строятся на языке CQL (диалекте SQL, адаптированном для CODB). Вы
	можете задействовать эту библиотеку как программно, так и используя
	консольный клиент codb.
	
	Использование в программах.
	
	Для использования библиотеки codb_query в программах вы должны собрать свою
	программу с этой библиотекой. Укажите при сборке '-lcodb_query'.
	
	Типичный сеанс работы состоит из следующих этапов:
<pre>db := codb_connect() // Подключение к базам данных
e := codb_get_error( db ) // Проверка ошибок
if e != NIL
	?? "ERROR codb_connect(): " + e + chr(10)
	return 1
endif

// Выполнение запроса
oRes := codb_execute( db, 'show databases' )

// Обработка результата
aResult := codb_get_result( oRes )

codb_close( db ) // Закрытие баз данных</pre>
	
	Подключение к базам данных обеспечивает функция <link
	linkend="functioncodb_connect">codb_connect()</link>. При этом открываются
	все доступные базы данных. Закрытие баз данных обеспечивается функцией <link
	linkend="functioncodb_close">codb_close()</link>.
	
	Собственно операции с базой данных обеспечивают функции:
	<link linkend="functioncodb_execute">codb_execute()</link>, 
	<link linkend="functioncodb_get_metaobject">codb_get_metaobject()</link>,
	<link linkend="functioncodb_get_object">codb_get_object()</link>,
	<link linkend="functioncodb_put_metaobject">codb_put_metaobject()</link>,
	<link linkend="functioncodb_put_object">codb_put_object()</link>.
	
	Отличие этих функций в том, что <link
	linkend="functioncodb_execute">codb_execute()</link> возвращает объект, из
	которого собственно данные можно получить функцией <link
	linkend="functioncodb_get_result">codb_get_result()</link>, а
	остальные функции оперируют готовыми объектами. 
	
	Для контроля ошибок используются функции <link
	linkend="functioncodb_get_answer">codb_get_answer()</link> и <link
	linkend="functioncodb_get_error">codb_get_error()</link>.
	
	Результат запроса, полученный при выполнении <link
	linkend="functioncodb_execute">codb_execute()</link>, можно обработать,
	используя функции <link 
	linkend="functioncodb_get_result">codb_get_result()</link>, 
	<link linkend="functioncodb_num_columns">codb_num_columns()</link>,
	<link linkend="functioncodb_num_rows">codb_num_rows()</link> и 
	<link linkend="functioncodb_get_column">codb_get_column()</link>.
	
	Кроме этого, результат можно получить в отформатированном виде. Для этого
	объект результата передаётся в метод 'show' объекта класса <link
	linkend="classCODB_FORMATTER">CODB_Formatter()</link>.
	
	Использование консоли codb.
	
	<pre>codb [параметры] [словарь[:депозитарий]]</pre>
	При запуске codb без параметров, он будет работать в интерактивном режиме.
	
	Параметры codb:
	-c 'команда'     Выполнить запрос и выйти.
  	--hide-titles    Не показывать заголовки столбцов.
  	--delim='DELIM'  Установить разделитель между столбцами.
  	
  	Полный перечень команд можно посмотреть, запустив <pre>codb -h</pre>.
  	
  	Примеры:
  	<pre>codb ETC01 -c 'show classes;'</pre>
  	Будет выведен список классов в базе данных ETC01.
  	<pre>codb ETC01:ETC0101 -c 'select * from mng_vendor,mng_author;' --delim='|'</pre>
	Будет выведены все поля объектов классов mng_vendor и mng_author из базы 
	данных ETC01 и депозитария ETC0101 с разделителем '|'.
	
	Примечание: данные выводятся в табличном виде, то есть поля дополняются 
	пробелами до ширины максимального элемента.
  	
  	Команды CQL.
  	
  	Каждая команда должна заканчиваться точкой с запятой. Вы можете
	использовать комментарии, начинающиеся с символа '#' до конца строки
	(символа '\n'). Строки ограничиваются одинарными кавычками ('). При
	употреблении кавычки в строке она экранируется обратной косой чертой (\').	
	
	Вы можете также передать несколько команд как в параметре -c, так и через
	каналы:
  	<pre>echo 'show classes;show indexes;' | codb ETC01</pre>

	Краткое описание команд CQL.
	<pre>
	help - помощь по команде;
	create - создать базу данных или метаобъект;
	delete - удалить объект или метаобъект;
	describe - показать структуру класса;
	drop - удалить метаобъект по его имени;
	get - получить содержимое объекта из депозитария;
	metaget - получить метаобъект;
	metaput - создать или изменить метаобъект;
	put - создать или изменить объект в депозитарии;
	select - получить список полей объектов;
	show - показать список метаобъектов;
	use - изменить текущую базу данных и депозитарий.
	</pre>
	В интерактивном режиме доступна команда <pre>quit</pre> - выход из
	консоли. Вы можете также выйти из консоли, нажав клавишу Esc.

	Подробное описание команд CQL:
	<pre>help [<команда>]</pre>
	Помощь по команде. Если команда не указывается, показывается список
	доступных команд с их кратким описанием.
	
	<pre>create <метакласс> (<поле1>=<значение1>[, ...])</pre>
	или <pre>create database <имя> <путь> [<описание>]</pre>
	Создать базу данных или метаобъект.
	Примеры:
	create database EAS01 /var/lib/db 'База данных E/AS';
	create attribute (name='phone',type='C',len=20);
	
	Доступные классы метаобъектов: 
	depository - депозитарий;
	extent - пространство имён;
	attribute - атрибут;
	counter - счётчик;
	index - индекс;
	class - класс;
	tcolumn - столбец вида;
	tview - вид;
	report - отчёт;
	plugin - подключаемый модуль;
	user - пользователь;
	group - группа пользователей.
	
	<pre>delete <id></pre>
	Удалить объект или метаобъект по его идентификатору.
	
	<pre>describe <имя_класса></pre>
	Показать структуру класса по его имени.
	
	<pre>drop <метакласс> <имя_метаобъекта></pre>
	Удалить метаобъект по его имени.
	
	Доступные классы метаобъектов: 
	depository - депозитарий;
	extent - пространство имён;
	attribute - атрибут;
	counter - счётчик;
	index - индекс;
	class - класс;
	tcolumn - столбец вида;
	tview - вид;
	report - отчёт;
	plugin - подключаемый модуль;
	user - пользователь;
	group - группа пользователей.
	
	<pre>get <id></pre>
	Получить содержимое объекта из депозитария по его идентификатору.
	
	<pre>metaget <id></pre>
	Получить метаобъект из словаря по его идентификатору.
	
	<pre>metaput (<поле1>=<значение1>[, ...])</pre>
	Создать или изменить метаобъект в словаре. Если в списке полей указан
	идентификатор (id), будет заменён существующий объект.
	
	<pre>put (<поле1>=<значение1>[, ...])</pre>
	Создать или изменить объект в депозитарии. Если в списке полей указан
	идентификатор (id), будет заменён существующий объект.
	
	<pre>select <поля> from <класс> [where <условия>]</pre>
	Получить список полей объектов, удовлетворяющих указанным критериям. 
	
	<поля> - список полей, разделённых запятыми. Поля с пробелами 
	заключаются в кавычки. Вы можете указать * для показа всех полей всех 
	указанных классов.
	
	<класс> - список имён классов, разделённых запятыми. Имена классов с 
	пробелами заключаются в кавычки.
	
	<условия> - условие по правилам CLIP. Поддерживаются операции 
	сравнения '==', '!=', '>', '>=', '<=', '<' и логические операции
	'.not.', '.and.', '.or.'. Значения должны заключаться в двойные кавычки ("),
	а между условиями не должно быть пробелов.
	
	Пример:
	<pre>select id,author_name,email from mng_author where code=="Uri";</pre>
	
	<pre>show <метакласс></pre>
	Показать список метаобъектов.
	
	Доступные классы метаобъектов: 
	databases - базы данных; 
	depositories - депозитарии;
	extents - пространства имён;
	attributes - атрибуты;
	counters - счётчики;
	indexes - индексы;
	classes - классы;
	tcolumns - столбцы видов;
	tviews - виды;
	reports - отчёты;
	plugins - подключаемые модули;
	users - пользователи;
	groups - группы пользователей;
	statistics - общая статистика по количеству метаобъектов.
	
	<pre>use <база_данных> [<депозитарий>]</pre>
	Изменить текущую базу данных и депозитарий.

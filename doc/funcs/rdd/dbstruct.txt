$FUNCNAME$
  DBSTRUCT()
$CATEGORY$
  DATABASE
$SUMMARY$
   Create an array containing the structure of a database file
$LANG_RU$
   Создает массив, содержащий информацию о структуре базы данных.
$SYNTAX$
     DBSTRUCT() --> aStruct
$LANG_RU$
     DBSTRUCT() -> массив, содержащий структуру
$RETURNS$
     DBSTRUCT() returns the structure of the current database file in an
     array whose length is equal to the number of fields in the database
     file.  Each element of the array is a subarray containing information
     for one field.  The subarrays have the following format:

     <PRE>DBSTRUCT() Return Array
     ------------------------------------------------------------------------
     Position     Metasymbol     dbstruct.ch
     ------------------------------------------------------------------------
     1            cName          DBS_NAME
     2            cType          DBS_TYPE
     3            nLength        DBS_LEN
     4            nDecimals      DBS_DEC
     ------------------------------------------------------------------------
     </PRE>

     If there is no database file in USE in the current work area, DBSTRUCT()
     returns an empty array ({}).
$LANG_RU$
     DBSTRUCT() возвращает структуру текущей базы данных в массиве с
     длиной, равной количеству полей в файле базы данных. Каждый элемент
     массива является подмассивом, содержащим информацию об этом поле.
     Подмассивы имеют следующий формат:

     <PRE>Массив, возвращаемый функцией DBSTRUCT().
     ---------------------------------------------------------------------
     Позиция       Метасимвол        dbstruct.ch
     ---------------------------------------------------------------------
       1            cName            DBS_NAME
       2            cType            DBS_TYPE
       3            nLength          DBS_LEN
       4            nDecimals        DBS_DEC
     ---------------------------------------------------------------------
     </PRE>

     Если в текущей рабочей области нет открытой базы данных, то
     DBSTRUCT() возвращает пустой ({}) массив.
$DESCRIPTION$
     DBSTRUCT() is a database function that operates like COPY STRUCTURE
     EXTENDED by creating an array of structure information rather than a
     database file of structure information.  There is another function,
     DBCREATE(), that can create a database file from the structure array.

     By default, DBSTRUCT() operates on the currently selected work area.  It
     will operate on an unselected work area if you specify it as part of an
     aliased expression as shown below.

     Note, a header file, dbstruct.ch, located in \include contains a
     series of manifest constants for each field attribute.
$LANG_RU$
     DBSTRUCT() - это функция работы с базами данных, функционирующая
     подобно команде COPY STRUCTURE EXTENDED. Однако первая создает массив
     с данными о структуре файла, а вторая - файл базы данных. Есть еще
     одна функция DBCREATE(), которая может создавать файл базы данных по
     информации о структуре из массива.

     По умолчанию DBSTRUCT() работает с активной (текущей) рабочей
     областью. Однако она может работать и с пассивной рабочей областью,
     если включить ее в выражение, уточненное алиасом, как показано ниже.

     Для облегчения работы в комплект поставки xClipper входит файл
     описаний dbstruct.ch, размещаемый в директории \include, в
     котором определены константы описания атрибутов каждого поля.
$EXAMPLES$
       This example opens two database files and then creates an
	array containing the database structure using DBSTRUCT() within an
	aliased expression.  The field names are then listed using AEVAL():

	#include "dbstruct.ch"
	//
	LOCAL aStruct
	USE Customer NEW
	USE Invoices NEW
	//
	aStruct := Customer->(DBSTRUCT())
	AEVAL( aStruct, {|aField| QOUT(aField[DBS_NAME])} )
$LANG_RU$
      Следующий пример открывает два файла баз данных и затем при помощи
       DBSTRUCT() создает массив, содержащий структуру базы данных. При
       этом используется выражение, уточненное алиасом. Далее, при помощи
       функции AEVAL(), составляется список имен полей:


       #include "dbstruct.ch"
       //
       LOCAL aStruct
       USE Customer NEW
       USE Invoices NEW
       //
       aStruct := Customer->(DBSTRUCT())
       AEVAL( aStruct, { |aField| QOUT(aField[DBS_NAME]) } )
$SEEALSO$
  AFIELDS()
$END$

/***
*	Errorsys.prg
* Standard error handler for Clipper 5.0
* Copyright (c) 1990 Nantucket Corp. All rights reserved.
*
* Compile with the options /m/n/w
*/

#include "error.ch"


// Messages displayed on the standard device STDERR
#command ? <list,...>   =>  ?? Chr(13) + Chr(10) ; ?? <list>
#command ?? <list,...>  =>  OutErr(<list>)


// Used below
#define NTRIM(n)		( LTrim(Str(n)) )



/***
*	ErrorSys()
*
* Note:  Automatically starts when start work
*/

proc ErrorSys()
	ErrorBlock( {|e| DefError(e)} )
return




/***
*	DefError()
*/
static func DefError(e)
local i, cMessage, aOptions, nChoice


        while dispcount()>0
           dispend()
        enddo
	outlog("error:",e)
  // The default divide by zero gives zero
	if ( e:genCode == EG_ZERODIV )
		return (0)
	end

	if ( e:genCode == EG_OPEN .and. e:osCode == 32 .and. e:canDefault )
		NetErr(.t.)
		return (.f.)									// NOTE
	end

	if ( e:genCode == EG_APPENDLOCK .and. e:canDefault )
		NetErr(.t.)
		return (.f.)									// NOTE
	end



  // Construction of the error message
	cMessage := ErrorMessage(e)

     // aOptions := {"Interrupt", "Finish"}    // 1,2
        aOptions := {"Finish"}                 // 1

	if (e:canRetry)
            AAdd(aOptions, "Repeat")           // 2
	end

	if (e:canDefault)
           AAdd(aOptions, "Skip")              // 3
	end


  // activation ALERT-menu
	nChoice := 0
	while ( nChoice == 0 )

		if ( Empty(e:osCode) )
			nChoice := Alert( cMessage, aOptions )

		else
			nChoice := Alert( cMessage + ;
	      ";(DOS-error code: " + NTRIM(e:osCode) + ")", ;
							aOptions )
		end


		if ( nChoice == NIL )
			exit
		end

	end


	if ( !Empty(nChoice) )

    // Executing by user choise
   if ( nChoice == 1 )                   // Break
      outlog("errorsys:",nchoice,"break")
      Break(e)
   endif

    if ( nChoice == 2 )               // Retry
      outlog("errorsys:",nchoice,"return .t.")
			return (.t.)

    elseif ( nChoice == 3 )               // Skip - Default
      outlog("errorsys:",nchoice,"return .f.")
			return (.f.)

		end

	end


  // Display a message and call stack procedures (with Finish)
	if ( !Empty(e:osCode) )
    cMessage += " (DOS-error code: " + NTRIM(e:osCode) + ") "
	end

	? cMessage
	i := 2
	while ( !Empty(ProcName(i)) )
    ? "Called from ", Trim(ProcName(i)) + ;
			"(" + NTRIM(ProcLine(i)) + ")  "

		i++
	end


  // Return to DOS
	ErrorLevel(1)
	QUIT

return (.f.)




/***
*	ErrorMessage()
*/
static func ErrorMessage(e)
local cMessage


  // Message error starting
  cMessage := if( e:severity > ES_WARNING, "Error ", "Warning " )


  // add subsystem name (if available)
	if ( ValType(e:subsystem) == "C" )
		cMessage += e:subsystem()
	else
		cMessage += "???"
	end


  // add SUBSYSTEM error code (if available)
	if ( ValType(e:subCode) == "N" )
		cMessage += ("/" + NTRIM(e:subCode))
	else
		cMessage += "/???"
	end


  // add description of error (if available)
	if ( ValType(e:description) == "C" )
    cMessage += (" " + e:description)
	end


  // add FILENAME or name of operation
	if ( !Empty(e:filename) )
		cMessage += (": " + e:filename)

	elseif ( !Empty(e:operation) )
		cMessage += (": " + e:operation)

	end


return (cMessage)
